"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const yaml_1 = require("yaml");
const fs_1 = require("fs");
const fast_glob_1 = __importDefault(require("fast-glob"));
const hash_1 = __importDefault(require("./hash"));
const create_codegen_opts_1 = __importDefault(require("./lib/create-codegen-opts"));
const paths_1 = require("./lib/paths");
const codegen_1 = require("./lib/codegen");
const util_1 = require("util");
const rimraf_1 = __importDefault(require("rimraf"));
const rimraf = util_1.promisify(rimraf_1.default);
const { readFile } = fs_1.promises;
async function gen(commandOpts) {
    const { configPath, cwd } = commandOpts;
    const config = yaml_1.parse(await readFile(configPath, 'utf-8'));
    await rimraf(path_1.default.join(cwd, config.generateDir));
    const codegenOpts = await create_codegen_opts_1.default(config, cwd);
    const gqlRelPaths = await fast_glob_1.default(config.documents, { cwd });
    if (gqlRelPaths.length === 0) {
        throw new Error(`No GraphQL documents are found from the path ${JSON.stringify(config.documents)}. Check "documents" in .graphql-let.yml.`);
    }
    for (const gqlRelPath of gqlRelPaths) {
        const gqlContent = await readFile(path_1.default.join(cwd, gqlRelPath), 'utf-8');
        const { tsxFullPath, dtsFullPath, dtsRelPath } = paths_1.createPaths(cwd, config.generateDir, gqlRelPath, hash_1.default(gqlContent));
        await codegen_1.codegen(gqlContent, gqlRelPath, tsxFullPath, dtsRelPath, dtsFullPath, config, codegenOpts);
    }
}
exports.default = gen;
